brooklyn.catalog:
  version: "2.1.0-SNAPSHOT" # CONTAINER_SERVICE_VERSION
  iconUrl: https://raw.githubusercontent.com/docker-library/docs/c350af05d3fac7b5c3f6327ac82fe4d990d8729c/docker/logo.png
  dependsOn:
    # From https://github.com/brooklyncentral/common-catalog-utils
    - commontests/common.tests.bom
  license_code: CLOUDSOFT-1.0

##
# To test stop effector:
#
# services:
# - type: test-container-stop
#
# To test stop cleanup:
#
# services:
# - type: test-container-clean-up
##

##
# Location templates
#
# Add a location named "location-container" based on this one:
#
#  - id: location-container-template
#    itemType: location
#    item:
#      type: jclouds:docker
#      brooklyn.config:
#        endpoint: https://10.102.2.XXX:3376
#        identity: <path to>/cert.pem
#        credential: <path to>/key.pem
#        waitForSshable: false
#        templateOptions:
#          networkMode: "brooklyn" # the default swarm network
#
# Add a location named "location-swarm-master" based on this one:
#
#  - id: location-swarm-master-template
#    itemType: location
#    item:
#      type: byon
#      brooklyn.config:
#        hosts: ["10.102.2.XXX"]
#        user: jenkins
#        privateKeyFile: ~/.ssh/id_rsa
##

  items:

  ##
  # Entities Under Test
  ##
  - id: container
    item:
      type: org.apache.brooklyn.entity.software.base.EmptySoftwareProcess
      id: container
      # Disable SSHing from the entity
      brooklyn.config:
        onbox.base.dir.skipResolution: true
        sshMonitoring.enabled: false

  - id: swarm-master
    item:
      type: org.apache.brooklyn.entity.machine.MachineEntity
      id: swarm-master
      brooklyn.parameters:
        - name: swarm.port
          default: 3376
      # Have a copy of the container IP so we have it around when it's stopped.
      brooklyn.initializers:
        - type: org.apache.brooklyn.core.sensor.StaticSensor
          brooklyn.config:
            static.value: $brooklyn:ancestor("test-scope").descendant("container").attributeWhenReady("host.subnet.address")
            name: container.ip
      location: location-swarm-master

  ##
  # Test Cases
  ##
  - id: wait-for-container-ip
    item:
      name: TEST [container.ip] [exists]
      description: Make sure we have an eagerly evaluated container ip, before we stop the container
      type: assert-sensor
      sensor: container.ip
      target: $brooklyn:ancestor("test-scope").descendant("swarm-master")
      assert:
      - notNull: true

  - id: assert-container-destroyed
    item:
      name: Assert container is destroyed
      type: test-ssh
      target: $brooklyn:ancestor("test-scope").descendant("swarm-master")
      shell.env:
        HOST_ADDRESS: $brooklyn:ancestor("test-scope").descendant("swarm-master").attributeWhenReady("host.address")
        SWARM_PORT: $brooklyn:ancestor("test-scope").descendant("swarm-master").config("swarm.port")
        CONTAINER_IP: $brooklyn:ancestor("test-scope").descendant("swarm-master").attributeWhenReady("container.ip")
      # TODO Assumes there's only one docker node in the swarm so that bridge IPs are global to the swarm
      command: |
        export DOCKER_HOST=${HOST_ADDRESS}:${SWARM_PORT};
        docker ps -a --format '{{ .ID }}' |
          xargs -n1 docker inspect --format '{{ .NetworkSettings.IPAddress }}' |
          grep "${CONTAINER_IP}"
      assertStatus:
        - equals: 1

  - id: wait-for-dd
    item:
      name: Wait for dd to complete
      type: test-ssh
      target: $brooklyn:ancestor("test-scope").descendant("swarm-master")
      shell.env:
        HOST_ADDRESS: $brooklyn:ancestor("test-scope").descendant("swarm-master").attributeWhenReady("host.address")
        SWARM_PORT: $brooklyn:ancestor("test-scope").descendant("swarm-master").config("swarm.port")
        CONTAINER_IP: $brooklyn:ancestor("test-scope").descendant("swarm-master").attributeWhenReady("container.ip")
      command: |
        export DOCKER_HOST=${HOST_ADDRESS}:${SWARM_PORT};
        export CONTAINER_ID=$(docker ps -a --format '{{ .ID }}' |
          xargs -n1 docker inspect --format '{{ .Id }}    {{.NetworkSettings.IPAddress}}' |
          grep $CONTAINER_IP | cut -f1 -d' ' | head -n1);
        ! docker exec $CONTAINER_ID ps | grep dd

  - id: asserts-container-stop
    item:
      type: test-case
      target: $brooklyn:ancestor("test-scope").descendant("container")
      brooklyn.config:
        timeout: 1m
      brooklyn.children:
        - type: assert-up
          brooklyn.config:
            timeout: 10m
        - type: invoke-stop-machine
        - type: assert-container-destroyed

  - id: assert-location-image
    item:
      name: Assert specific image is used
      type: test-ssh
      brooklyn.config:
        target: $brooklyn:ancestor("test-scope").descendant("swarm-master")
        shell.env:
          HOST_ADDRESS: $brooklyn:ancestor("test-scope").descendant("swarm-master").attributeWhenReady("host.address")
          SWARM_PORT: $brooklyn:ancestor("test-scope").descendant("swarm-master").config("swarm.port")
          IMAGE_PREINSTALL_ID: $brooklyn:config("image.preinstall.id")
          CONTAINER_IP: $brooklyn:ancestor("test-scope").descendant("swarm-master").attributeWhenReady("container.ip")
        # TODO Assumes there's only one docker node in the swarm so that bridge IPs are global to the swarm
        command: |
          export DOCKER_HOST=$HOST_ADDRESS:$SWARM_PORT;
          docker ps -a --format '{{ .ID }}' |
            xargs -n1 docker inspect --format '{{ .Image }}@{{ .NetworkSettings.IPAddress }}' |
            grep $IMAGE_PREINSTALL_ID@$CONTAINER_IP
        assert.status:
          - equals: 0

  - id: docker-pull-image
    item:
      name: Pull Docker image
      type: test-ssh
      brooklyn.config:
        target: $brooklyn:ancestor("test-scope").descendant("swarm-master")
        shell.env:
          HOST_ADDRESS: $brooklyn:ancestor("test-scope").descendant("swarm-master").attributeWhenReady("host.address")
          SWARM_PORT: $brooklyn:ancestor("test-scope").descendant("swarm-master").config("swarm.port")
          PULL_IMAGE_NAME: $brooklyn:config("pull.image.name")
        command: |
          export DOCKER_HOST=$HOST_ADDRESS:$SWARM_PORT;
          if [ "$PULL_IMAGE_NAME" ]; then
            docker pull $PULL_IMAGE_NAME
          fi
        assert.status:
          - equals: 0

  - id: test-location-image
    item:
      name: Location image test
      id: test-scope
      type: test-case
      brooklyn.config:
        target: $brooklyn:ancestor("test-scope").descendant("container")
        timeout: 1m
      brooklyn.children:
        - type: swarm-master
        - type: docker-pull-image
        - type: container
          provisioning.properties:
            templateOptions:
              entrypoint: ["/bin/sh", "-c", "while true; do sleep 10; done"]
        - type: assert-up
          brooklyn.config:
            timeout: 10m
        - type: wait-for-container-ip
        - type: assert-location-image

  ##
  # Test Suite
  ##
  - id: test-container-stop
    item:
      name: Jclouds docker provider release test
      id: test-scope
      type: test-case
      brooklyn.children:
        - type: swarm-master
        - type: container
          location: location-container
          provisioning.properties:
            templateOptions:
              entrypoint: [ "/bin/sh", "-c", "while true; do sleep 10; done" ]
        - type: wait-for-container-ip
        - type: asserts-container-stop

  - id: test-container-clean-up
    item:
      name: Jclouds docker provider clean up test
      id: test-scope
      type: test-case
      brooklyn.children:
        - type: container
          location: location-container
          provisioning.properties:
            templateOptions:
              entrypoint: [ "/bin/sh", "-c", "dd if=/dev/zero of=5g.img bs=1M count=5120; while true; do sleep 10; done" ]
        - type: swarm-master
        - type: wait-for-container-ip
        - type: wait-for-dd

  - id: test-default-image
    item:
      name: Default image test
      type: test-location-image
      brooklyn.config:
        # Should already be there
        # pull.image.name: cloudsoft/centos:7
        pull.image.name: ""
        image.preinstall.id: sha256:6a0c0700e98ddc24192bec532b107b61cb0d76b27a3a7daeff0cb0a28692d311
      location: location-container

  - id: test-explicit-image-id
    item:
      name: Explicit imageId test
      type: test-location-image
      brooklyn.config:
        pull.image.name: busybox:1.24
        image.preinstall.id: sha256:47bcc53f74dc94b1920f0b34f6036096526296767650f223433fe65c35f149eb
      location:
        location-container:
          imageId: sha256:47bcc53f74dc94b1920f0b34f6036096526296767650f223433fe65c35f149eb

  - id: test-explicit-image-name
    item:
      name: Explicit image name test
      type: test-location-image
      brooklyn.config:
        pull.image.name: busybox:1.24
        image.preinstall.id: sha256:47bcc53f74dc94b1920f0b34f6036096526296767650f223433fe65c35f149eb
      location:
        location-container:
          imageDescriptionRegex: busybox:1.24

  - id: jclouds-tests
    item:
      type: test-case
      name: Jclouds provider tests
      brooklyn.children:
        - type: test-container-stop
          name: "1. Container Stop Test"
        - type: test-container-clean-up
          name: "2. Container Clean Up Test"
        - type: test-default-image
          name: "3. Default Image Test"
        - type: test-explicit-image-id
          name: "4. Explicit Image ID Test"
        - type: test-explicit-image-name
          name: "5. Explicit Image Name Test"
