Coding Standards
================

We must have a coding standard, especially as this is an open source (or free?)
software project.

From android standard:

     The rules below are not guidelines or recommendations, but strict
     rules. Contributions to Android generally will not be accepted if they do not
     adhere to these rules.

     Not all existing code follows these rules, but all new code is expected to.

We can avoid the second clause by using a standard now.

Existing Standards
==================

Here are some existing standards:

http://www.oracle.com/technetwork/java/codeconvtoc-136057.html
http://source.android.com/source/code-style.html
https://cwiki.apache.org/qpid/java-coding-standards.html
http://static.springsource.org/spring/xml/spring-code-conventions.xml
http://seamframework.org/Seam3/DevelopmentGuidelines

I have not read them all in detail but my general impression is that 
most of them are generally good practice and things we do already.

One thing we can easily define now and which is not universally agreed upon is
formatting. This is important to do early to avoid having to reformat.

Line Length
-----------

Oracle 80, JBoss 128, Android 100 but exceptions:
Exception: if a comment line contains an example command or a literal URL longer
than 100 characters, that line may be longer than 100 characters for ease of cut
and paste.

Exception: import lines can go over the limit because humans rarely see
them. This also simplifies tool writing.

I like the android approach - keep it shorter where possible but allow longer in
special cases. I am nearly convinced that 80 is outdated. 100 is probably a good
compromise.



Brooklyn Standard
=================

This is for Java and Groovy code. Not all parts will apply to Java -
e.g. optional brackets.

Formatting
----------

It is strongly preferable but not mandatory to use curly brackets for if blocks.

You must use brackets for function calls of more than one argument.
Optional for function calls with one argument.

In general, do not use semicolons at the end of lines. They may be used in
certain situations if it makes the code clearer.

Use spaces around comparison operators, e.g.
         while (size > 0) {

not 

         while (size>0) {

Comments
--------

Long comments should start with a summary sentence. Then there should be a
blank line before the rest of the comment.

Do not fully describe a function in the @return paramater. This should be
explained in the initial summary sentence and following text.

Write in English sentences. These start with a capital letter and end with a
terminal symbol.

Use of @link and @see is encouraged.
Don't use @version except perhaps in APIs.
Don't use @author.


Indenting
~~~~~~~~~

Indent with spaces only. 4 for a normal indent.

No space at end of lines or on blank lines.
(Eclipse has a nasty habit of doing this.)

Line length
~~~~~~~~~~~

Length 100, except imports, URLs and things (e.g. examples) that might want to
be copied.
