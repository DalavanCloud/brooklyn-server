Coding Standards
================

We must have a coding standard, especially as this is an open source (or free?)
software project.

From android standard:

     The rules below are not guidelines or recommendations, but strict
     rules. Contributions to Android generally will not be accepted if they do not
     adhere to these rules.

     Not all existing code follows these rules, but all new code is expected to.

We can avoid the second clause by using a standard now.

(Alex%  it might be worth calling out some as recommendations as some best practices
aren't always best...)


Existing Standards
==================

Here are some existing standards:

http://www.oracle.com/technetwork/java/codeconvtoc-136057.html
http://source.android.com/source/code-style.html
https://cwiki.apache.org/qpid/java-coding-standards.html
http://static.springsource.org/spring/xml/spring-code-conventions.xml
http://seamframework.org/Seam3/DevelopmentGuidelines

I have not read them all in detail but my general impression is that 
most of them are generally good practice and things we do already.

One thing we can easily define now and which is not universally agreed upon is
formatting. This is important to do early to avoid having to reformat.

Line Length
-----------

Oracle 80, JBoss 128, Android 100 but exceptions:
Exception: if a comment line contains an example command or a literal URL longer
than 100 characters, that line may be longer than 100 characters for ease of cut
and paste.

Exception: import lines can go over the limit because humans rarely see
them. This also simplifies tool writing.

I like the android approach - keep it shorter where possible but allow longer in
special cases. I am nearly convinced that 80 is outdated. 100 is probably a good
compromise.


Alex% I like 128 ... with wide screens less than that becomes hard to read quite often
with extra unwanted line breaks

Alistair%
I favour shorter line because:
Not everyone has large screens.
It allows side by side diff.
You can keep toolbars and things open in IDEs.

Brooklyn Standard
=================

This is for Java and Groovy code. Not all parts will apply to Java -
e.g. optional brackets.

Formatting
----------

It is strongly preferable but not mandatory to use curly brackets for if blocks.

Alex% i don't like them in a long if..else if..else if.. block
Alistair% Surely it is more important in these situations? We may not be
thinking of the same thing though.

You must use brackets for function calls of more than one argument.
Optional for function calls with one argument (in Groovy),
recommended if that function is likely to be wrapped,

In general, do not use semicolons at the end of lines. They may be used in
certain situations if it makes the code clearer.

Alex% why? i often don't but sometimes do, to make it look more java-like,
or if importing java.  i don't think it makes any difference...

Alistair% Agreed it doesn't make much difference, most of the time, so we can
chose either. It is important to be consistent though - things which are the
same should look the same. This reduces thought in typing and visual
processing.

Use spaces around comparison operators, e.g.
         while (size > 0) {
not 
         while (size>0) {


Alex% yuck. prefer using spaces in a line for readability, as one sees fit.
  i>0 needs no spaces. list.findAll({..}).size() > 1  probably should.
  Splodge: Yuck! I've never liked this tendency to omit whtespace around operators,
           except perhaps "for "+"string "+"concatenation". Each to their own, I guess,
           although it always struck me as odd; certainly never worked with other
           developers who recommend that style.

Alistair% It is possible this is just personal preference but I was confused
by some Monterey code I saw which had a multi-symbol conditional with no
space. I wondered briefly if java had got some new perl like operator.

Comments
--------

Long comments should start with a summary sentence. Then there should be a
blank line before the rest of the comment.

Alex% blank line optional

Alistair% Not if it's javadoc. Why not be consistent with other comments?

Do not fully describe a function in the @return paramater. This should be
explained in the initial summary sentence and following text.

Write in English sentences. These start with a capital letter and end with a
terminal symbol.

Alex% why? often brief notes are more useful e.g. /* shouldn't happen */. only exception i'd say is _API_ javadoc.
Alex% need to differentiate between javadoc and comments
  Splodge: Bad grammar/capitalisation in publicly visible docs will make us appear slapdash
           (in some people's minds, at least). And might as well be consistent for all comments,
           no? At least in capitalisation?!

Alistair% When I see things like that I sometimes wonder if the start of the
comment had been chopped off, or if the author had not finished and
accidentally checked it in (particularly in the case of longer comments).
/* Shouldn't happen. */ looks rather stronger and complete. It's also
just a basic feeling that things should be done correctly.
Is there a disadvantage to doing this?

Use of @link and @see is encouraged.
Don't use @version except perhaps in APIs.
Don't use @author.

Alex% @author is useful sometimes
  Splodge: Disagree; we should embrace shared code ownership and expect that most files will have many authors.
           commit history is much more useful to ascertain who did what, and when.

Alistair% Under what circumstances? This should be defined here.
I said it should not be used becauase the authors can be found from version
control. It also gives a sense of proprietorship and could discourage
collective code ownership.

Alex% unhelpful javdoc is punishable with extreme prejudice  e.g. /** getter for remote state @return remote state */ Object getRemoteState();
  Splodge: Enthusiastic agreement.


Indenting
~~~~~~~~~

Indent with spaces only. 4 for a normal indent.

Alex% is this universal? does eclipse handle this correctly? tab for any indentation is nice because people can set it how they want...

Alistair% Oh dear - tabs v. spaces is a holy war. It does seem to have been
pretty much won by spaces though. The problem with tabs is that they show
differently in different editors. Anyone not using the same editor with the
same settings as the author can have the indentation broken. I think there was
only one of the open source standards I reviewed that specified tabs.

Eclipse can be configured for tabs or spaces. We have a standard eclipse
formatter for Monterey that does this. It's attached to the developer setup
wiki page.

No space at end of lines or on blank lines.
(Eclipse has a nasty habit of doing this.)

Line length
~~~~~~~~~~~

Length 100, except imports, URLs and things (e.g. examples) that might want to
be copied.

Alex% i vote 128


Groovy Code
~~~~~~~~~~~

In general, provide type information for items, particularly where it will help your colleagues with refactoring and code completion.
Splodge: Agree!
